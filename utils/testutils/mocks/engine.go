// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import big "math/big"

import mock "github.com/stretchr/testify/mock"
import rabbitmq "github.com/tomochain/backend-matching-engine/rabbitmq"
import types "github.com/tomochain/backend-matching-engine/types"

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: order
func (_m *Engine) CancelOrder(order *types.Order) (*types.EngineResponse, error) {
	ret := _m.Called(order)

	var r0 *types.EngineResponse
	if rf, ok := ret.Get(0).(func(*types.Order) *types.EngineResponse); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EngineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTrades provides a mock function with given fields: orders, amount
func (_m *Engine) CancelTrades(orders []*types.Order, amount []*big.Int) error {
	ret := _m.Called(orders, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*types.Order, []*big.Int) error); ok {
		r0 = rf(orders, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrder provides a mock function with given fields: o
func (_m *Engine) DeleteOrder(o *types.Order) error {
	ret := _m.Called(o)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Order) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrders provides a mock function with given fields: orders
func (_m *Engine) DeleteOrders(orders ...types.Order) error {
	_va := make([]interface{}, len(orders))
	for _i := range orders {
		_va[_i] = orders[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...types.Order) error); ok {
		r0 = rf(orders...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderBook provides a mock function with given fields: pair
func (_m *Engine) GetOrderBook(pair *types.Pair) ([]*map[string]float64, []*map[string]float64, error) {
	ret := _m.Called(pair)

	var r0 []*map[string]float64
	if rf, ok := ret.Get(0).(func(*types.Pair) []*map[string]float64); ok {
		r0 = rf(pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*map[string]float64)
		}
	}

	var r1 []*map[string]float64
	if rf, ok := ret.Get(1).(func(*types.Pair) []*map[string]float64); ok {
		r1 = rf(pair)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*map[string]float64)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*types.Pair) error); ok {
		r2 = rf(pair)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRawOrderBook provides a mock function with given fields: pair
func (_m *Engine) GetRawOrderBook(pair *types.Pair) ([][]types.Order, error) {
	ret := _m.Called(pair)

	var r0 [][]types.Order
	if rf, ok := ret.Get(0).(func(*types.Pair) [][]types.Order); ok {
		r0 = rf(pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]types.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Pair) error); ok {
		r1 = rf(pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleOrders provides a mock function with given fields: msg
func (_m *Engine) HandleOrders(msg *rabbitmq.Message) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rabbitmq.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecoverOrders provides a mock function with given fields: orders
func (_m *Engine) RecoverOrders(orders []*types.OrderTradePair) error {
	ret := _m.Called(orders)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*types.OrderTradePair) error); ok {
		r0 = rf(orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
