// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import big "math/big"
import common "github.com/ethereum/go-ethereum/common"

import mock "github.com/stretchr/testify/mock"
import types "github.com/ethereum/go-ethereum/core/types"

// Ethereum is an autogenerated mock type for the Ethereum type
type Ethereum struct {
	mock.Mock
}

// Allowance provides a mock function with given fields: owner, spender, token
func (_m *Ethereum) Allowance(owner common.Address, spender common.Address, token common.Address) (*big.Int, error) {
	ret := _m.Called(owner, spender, token)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address, common.Address, common.Address) *big.Int); ok {
		r0 = rf(owner, spender, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, common.Address, common.Address) error); ok {
		r1 = rf(owner, spender, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BalanceOf provides a mock function with given fields: owner, token
func (_m *Ethereum) BalanceOf(owner common.Address, token common.Address) (*big.Int, error) {
	ret := _m.Called(owner, token)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address, common.Address) *big.Int); ok {
		r0 = rf(owner, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, common.Address) error); ok {
		r1 = rf(owner, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeAllowance provides a mock function with given fields: owner, token
func (_m *Ethereum) ExchangeAllowance(owner common.Address, token common.Address) (*big.Int, error) {
	ret := _m.Called(owner, token)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address, common.Address) *big.Int); ok {
		r0 = rf(owner, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, common.Address) error); ok {
		r1 = rf(owner, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceAt provides a mock function with given fields: a
func (_m *Ethereum) GetBalanceAt(a common.Address) (*big.Int, error) {
	ret := _m.Called(a)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address) *big.Int); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingNonceAt provides a mock function with given fields: a
func (_m *Ethereum) GetPendingNonceAt(a common.Address) (uint64, error) {
	ret := _m.Called(a)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitMined provides a mock function with given fields: tx
func (_m *Ethereum) WaitMined(tx *types.Transaction) (*types.Receipt, error) {
	ret := _m.Called(tx)

	var r0 *types.Receipt
	if rf, ok := ret.Get(0).(func(*types.Transaction) *types.Receipt); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Transaction) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
